@model Blog.Models.ArticleStruct
@Scripts.Render("~/bundles/jquery/TextEditor")
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="/Scripts/TextEditor/plugins/codesnippet/lib/highlight/styles/default.css" rel="stylesheet" />
<link href="/Content/css/page/Article.css" rel="stylesheet" />
<script src="/Scripts/TextEditor/plugins/codesnippet/lib/highlight/highlight.pack.js"></script>
<script src="~/Scripts/Article/Index.js"></script>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<!-- Page Header -->
<!-- Set your background image for this header on the line below. -->
<header class="intro-header">
    <div class="container">
        <div class="row">

            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1 col-sm-10  col-xs-offset-1 ">
                <div class="col-xl-12 col-lg-12 col-md-12  col-sm-12  col-xs-12 ">
                    <div class="post-heading">
                        <a class="pull-right btn" id="TitleEditButton" style="display: none" data-toggle="modal" data-target="#modalEditTitle" data-operation="edit" @if (ViewBag.isPreView != null && ViewBag.isPreView) { @Html.Raw("disabled = 'disabled'")    }><span class="glyphicon glyphicon-edit"></span></a>
                        <h1>@Html.DisplayFor(item => Model.Article.Title)</h1>
                        <h2 class="subheading">@Html.DisplayFor(item => Model.Article.SubTitle)</h2>
                        <span class="meta">Posted by <a href="#">@ViewBag.AuthorName</a> <span class="postdate">@Html.DisplayFor(item => Model.Article.PostDate)</span> </span>
                        <div id="tags">
                            @if (ViewBag.tag1 != null)
                            {
                                <a href="/Home/Index/@ViewBag.tagId1" target="_blank">
                                    <span class="label label-default">
                                        <span class="glyphicon glyphicon-tags"></span>	&nbsp;@ViewBag.tag1
                                    </span>
                                </a>
                            }
                            @if (ViewBag.tag2 != null)
                            {<a href="/Home/Index/@ViewBag.tagId2" target="_blank">
                                <span class="label label-default">
                                    <span class="glyphicon glyphicon-tags"></span>	&nbsp;@ViewBag.tag2
                                </span>
                            </a>
                            }
                            @if (ViewBag.tag3 != null)
                            {
                                <a href="/Home/Index/@ViewBag.tagId3" target="_blank">
                                    <span class="label label-default">
                                        <span class="glyphicon glyphicon-tags"></span>	&nbsp;@ViewBag.tag3
                                    </span>
                                </a>
                            }
                            @if (ViewBag.tag4 != null)
                            {<a href="/Home/Index/@ViewBag.tagId4" target="_blank">
                                <span class="label label-default">
                                    <span class="glyphicon glyphicon-tags"></span>	&nbsp;@ViewBag.tag4
                                </span>
                            </a>
                            }
                            @if (ViewBag.tag5 != null)
                            {
                                <a href="/Home/Index/@ViewBag.tagId5" target="_blank">
                                    <span class="label label-default">
                                        <span class="glyphicon glyphicon-tags"></span>	&nbsp;@ViewBag.tag5
                                    </span>
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</header>

<article>
    <div class="container">
        <div class="row">
            <a class="pull-right btn" id="ContentEditButton" style="display: none" data-operation="edit" @if (ViewBag.isPreView != null && ViewBag.isPreView) { @Html.Raw("disabled = 'disabled'")            }><span class="glyphicon glyphicon-edit"></span></a>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-12">
                <div id="articleContent">@Html.Raw(HttpUtility.HtmlDecode(Model.Article.Content))</div>
                <br>
                <hr>


                <!-- Blog Comments -->
                <button class="btn btn-primary btn-raised btn-block" data-toggle="modal" data-target="#Comment" id="LeaveCommend" @if (ViewBag.isPreView != null && ViewBag.isPreView) { @Html.Raw("disabled = 'disabled'")            }>Leave Comment</button>
                <a class="btn btn-primary btn-raised btn-block" data-toggle="collapse" href="#comments" @if (ViewBag.isPreView != null && ViewBag.isPreView) { @Html.Raw("disabled = 'disabled'")           }>Comments <span class="badge">@Model.RootComments.Count</span></a>
                <hr>
                <!-- Comment -->
                <div class="collapse" id="comments">
                    @if (Model.RootComments != null)
                    {
                        for (int i = 0; i < Model.RootComments.Count; i++)
                        {
                            var item = Model.RootComments.ElementAt(i);
                        <!-- Comment -->
                            <div class="media panel">
                                <a class="pull-left btn">
                                    <img class="media-object" src="http://placehold.it/64x64" alt="">
                                </a><span class="badge pull-right">
                                    @(i + 1)@switch ((i + 1) % 10)
                                    {
                                        case 2:
                                            WriteLiteral("nd");
                                            break;
                                        case 3:
                                            WriteLiteral("rd");
                                            break;
                                        case 1:
                                            WriteLiteral("st");
                                            break;
                                        default:
                                            WriteLiteral("th");
                                            break;
                                    } Floor
                                </span>
                                <div class="media-body">
                                    <h4 class="media-heading">
                                        @item.ParentComment.CommentName

                                        <small>
                                            <em>
                                                From @if (item.ParentComment.Country == null)
                                                { @Html.Raw("Mars") }
                                                else { @item.ParentComment.Country}
                                            </em><p class="postdate">@item.ParentComment.CreateDate</p>
                                        </small>
                                    </h4>

                                    <a class="pull-right btn" data-value="@item.ParentComment.CommentId" data-content="@HttpUtility.HtmlDecode(item.ParentComment.Content)" data-contentName="@item.ParentComment.CommentName" data-toggle="modal" data-target="#Comment"><span class="glyphicon glyphicon-comment"></span></a>
                                    @Html.Raw(HttpUtility.HtmlDecode(@item.ParentComment.Content))

                                    <!-- Nested Comment -->
                                    @if (item.ChildComments != null)
                                    {
                                        foreach (var subitem in item.ChildComments)
                                        {
                                            <div class="media">
                                                <a class="pull-left" href="#">
                                                    <img class="media-object" src="http://placehold.it/64x64" alt="">
                                                </a>
                                                <div class="media-body">
                                                    <h4 class="media-heading">
                                                        @subitem.CommentName
                                                        <small>@subitem.CreateDate</small>
                                                    </h4>
                                                    @Html.Raw(HttpUtility.HtmlDecode(subitem.Content))
                                                </div>
                                            </div>
                                    <!-- End Nested Comment -->
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>





            </div>
        </div>
    </div>
</article>

<div class="modal fade" id="modalEditTitle" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">

            <div class="modal-header">
                <button type="button" class="close pull-right" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Title Edit</h4>
            </div>
            <div class="modal-body">
                <div class="input-group  input-group-sm">
                    <span class="input-group-addon">Title</span>
                    <input type="text" class="form-control" id="titleModified" value="@Model.Article.Title">
                </div>
                <br />
                <div class="input-group  input-group-sm">
                    <span class="input-group-addon">SubTitle</span>
                    <input type="text" class="form-control" id="subTitleModified" value="@Model.Article.SubTitle">
                </div>
            </div>
            <div class="modal-footer">
                <button type="submit" id="pop-up-confirm" class="btn btn-primary btn-raised btn-sm" onclick="updateTitle()">Comfirm</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<div class="modal fade" id="Comment" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">

            <div class="modal-header">
                <button type="button" class="close pull-right" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@Model.Article.Title</h4>
            </div>
            <div class="modal-body">
                <!-- Comments Form -->
                <div class="panel" style="padding: 10px;">
                    <h4 id="CommentTitle">Leave a Comment:</h4>
                    <blockquote id="CommentContext" hidden></blockquote>
                    @using (Html.BeginForm("CommentPost", "Article", FormMethod.Post, new { role = "form" }))
                    {
                        <div class="form-group">
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(a => a.CommentArticle.ReplyId, new { id = "ReplyId" })
                            @Html.HiddenFor(a => a.Article.ArticleId, new { value = Model.Article.ArticleId })
                            @Html.TextAreaFor(a => a.CommentArticle.Content, new { @class = "form-control", name = "Content", id = "Content", rows = "3" })
                            <a class="btn" id="emojiEntry" href="#" data-toggle="popover" data-placement="buttom"><span class="glyphicon glyphicon-picture"></span></a>
                            @*<textarea class="form-control" ,name="Content", id="Content",rows="3"></textarea>*@
                        </div>
                        <button type="submit" class="btn btn-raised btn-primary">Submit</button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div id="emojiPack" class="popper-content hide">
    <div class="panel panel-default">
        <div class="panel-heading" id="emojiheader">
            <ul class="nav nav-tabs">
                @for (var i = 0; ViewBag.emoji != null && i < ViewBag.emoji.Length; i++)
                {
                    <li role="presentation"><a class="btn" onclick="getEmoji(this);" value="@i">@ViewBag.emoji[i]</a></li>
                }
            </ul>
        </div>
        <div class="panel-body" ud="emojicontent">
            <div class="row emoji">

                <div id="emojisList">
                </div>
            </div>
        </div>
    </div>




</div>


<input hidden id="userId" value="@Session["LoggedUserID"]" />
<input hidden id="articleId" value="@Model.Article.ArticleId" />
<input hidden id="authorId" value="@Model.Article.AuthorId" />
@* ReSharper disable once MisuseOfOwnerFunctionThis *@
<script>
    @*    CKEDITOR.replace('Content', {
            filebrowserImageBrowseUrl: '/home/ViewImage/' +@Session["LoggedUserID"] +'',
            filebrowserImageUploadUrl: '/home/UploadImage/' +@Session["LoggedUserID"] +'',
            customConfig: '/Scripts/TextEditor/config.js'
        });*@
</script>

